EXPORT ST(X)
BEGIN
    RETURN SIN(X)^2+1;
END;

EXPORT STEFFENSEN(p0, tol)
BEGIN

    LOCAL p1, p2, pg, lastpg;
    LOCAL error, iter;

    iter := 0;
    p1 := ST(p0);
    p2 := ST(p1);
    pg := p0 - ((p1 - p0)^2/(p2 - 2*p1 + p0));
    error := 1000;

    REPEAT
        iter := iter +1;
        lastpg := pg;

        p0 := pg;
        p1 := ST(p0);
        p2 := ST(p1);

        IF (p2 - 2*p1 + p0) == 0 THEN
            MSGBOX("Division by zero in the formula");
            BREAK;
        ELSE
            pg := p0 - ((p1 - p0)^2/(p2 - 2*p1 + p0));
        END;

        error := ABS(lastpg - pg);

    UNTIL error < tol;

    PRINT("");
    IF error < tol THEN
        PRINT("Converged to: " + STRING(pg, 6));
    ELSE
        PRINT("Did not converge.");
    END;

    RETURN {pg, iter};
END;

EXPORT STEFFENSEN_SPREAD(p0, tol)
BEGIN
    LOCAL p1, p2, pg, lastpg;
    LOCAL error, iter;

    // Header
    STEFFENSEN.Cell(1, 1) := "Iter";
    STEFFENSEN.Cell(1, 2) := "p0";
    STEFFENSEN.Cell(1, 3) := "p1";
    STEFFENSEN.Cell(1, 4) := "p2";
    STEFFENSEN.Cell(1, 5) := "pg";
    STEFFENSEN.Cell(1, 6) := "Error";

    // Initial values
    p1 := ST(p0);
    p2 := ST(p1);

    IF (p2 - 2*p1 + p0) == 0 THEN
        MSGBOX("Division by zero in the first iteration.");
        RETURN "Division by zero";
    END;

    pg := p0 - ((p1 - p0)^2 / (p2 - 2*p1 + p0));
    error := 1000;
    iter := 0;

    // Log initial row
    STEFFENSEN.Cell(2, 1) := iter;
    STEFFENSEN.Cell(2, 2) := p0;
    STEFFENSEN.Cell(2, 3) := p1;
    STEFFENSEN.Cell(2, 4) := p2;
    STEFFENSEN.Cell(2, 5) := pg;
    STEFFENSEN.Cell(2, 6) := error;

    // Loop starts at iter = 1
    REPEAT
        iter := iter + 1;
        lastpg := pg;

        p0 := pg;
        p1 := ST(p0);
        p2 := ST(p1);

        IF (p2 - 2*p1 + p0) == 0 THEN
            MSGBOX("Division by zero during iteration.");
            BREAK;
        END;

        pg := p0 - ((p1 - p0)^2 / (p2 - 2*p1 + p0));
        error := ABS(lastpg - pg);

        STEFFENSEN.Cell(iter + 2, 1) := iter;
        STEFFENSEN.Cell(iter + 2, 2) := p0;
        STEFFENSEN.Cell(iter + 2, 3) := p1;
        STEFFENSEN.Cell(iter + 2, 4) := p2;
        STEFFENSEN.Cell(iter + 2, 5) := pg;
        STEFFENSEN.Cell(iter + 2, 6) := error;

    UNTIL error < tol;

    IF error < tol THEN
        RETURN {pg, iter};
    ELSE
        MSGBOX("Did not converge.");
        RETURN {pg, iter};
    END;
END;


